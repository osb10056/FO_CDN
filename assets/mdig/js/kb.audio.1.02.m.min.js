var miniAudioPlayerAni = {
    playerBody: $(".audioPlayer"),
    miniPlayer: $(".miniPlayer"),
    thumb: $(".miniPlayer .thumb"),
    contorlBox: $(".audioPlayer .contorlBox"),
    audioPlayList: $(".audioPlayer .playList"),
    btnAudioPlay: $(".audioPlayer .pannel .btn_play button"),
    btnAudioListPlay: $(".audioPlayer .playList .btn_inPlay "),
    btnAudioClose: $(".audioPlayer .btn_close "),
    playTimmer: $(".audioPlayer .time"),
    totlaTimmer: $(".audioPlayer .total"),
    playOpenState: !1,
    playProgress: $(".audioPlayer .progress"),
    progressDot: $(".audioPlayer .progress_dot"),
    init: function() {
        this.thumb.click(function() {
            if(miniAudioPlayerAni.playerBody.hasClass('open')){
                var a = parseInt(miniAudioPlayerAni.audioPlayList.css("top"));
                miniAudioPlayerAni.audioPlayListPannel(a)
            }
            miniAudioPlayerAni.controlPannel()
        }),
            this.playerBody.find(".btn_playList").click(function() {
                var a = parseInt(miniAudioPlayerAni.audioPlayList.css("top"));
                miniAudioPlayerAni.audioPlayListPannel(a)
            }),
            $(document).on("click", ".btn_inPlay", function() {
                var a = $(".audioPlayer .playList .btn_inPlay ");
                if (!!$(this).hasClass("stop"))
                    $(".audioPlayer .pannel .btn_play button").click();
                else if ($(this).hasClass("last"))
                    _EKYOBO.getTime(),
                        $(".audioPlayer .pannel .btn_play button").click();
                else {
                    var b = $(this).closest("li")[0].originalData;
                    _EKYOBO.fileChange(b.time, b.src, b.barcode, b.url, b.title, b.reading, !0),
                        a.removeClass("stop"),
                        a.removeClass("last"),
                        miniAudioPlayerAni.audioStop(),
                        $(this).addClass("stop"),
                        $(this).addClass("last"),
                        setTimeout(function() {
                            miniAudioPlayerAni.audioPlay()
                        }, 200)
                }
            }),
            this.btnAudioClose.click(function() {
                return miniAudioPlayerAni.audioStop(),
                    $(".audioPlayer").hide(),
                    miniAudioPlayerAni.btnAudioListPlay.removeClass("stop"),
                    miniAudioPlayerAni.btnAudioListPlay.removeClass("last"),
                    miniAudioPlayerAni.audioStop(),
                    miniAudioPlayerAni.playOpenState = !1,
                    miniAudioPlayerAni.controlPannelClose(),
                    $(_EKYOBO.getAudioDiv()).find().remove("audio"),
                    !1
            }),
            $(document).on("click", ".audioPlayer .pannel .btn_play button", function() {
                $(this).parent().hasClass("stop") ? miniAudioPlayerAni.audioStop() : ($(".btn_inPlay").parent().find(".last").addClass("stop"),
                    _EKYOBO.getTime(),
                    miniAudioPlayerAni.audioPlay())
            })
    },
    audioPlayListPannel: function(a) {
        0 <= a ? (this.audioPlayList.css("display", "block"),
            this.audioPlayList.animate({
                top: "-58px",
            }, 500, "easeOutCirc")) : (this.contorlBox.animate({
            height: "50px"
        }, 200),
            this.audioPlayList.animate({
                top: "0"
            }, 200, function() {
                miniAudioPlayerAni.audioPlayList.css("display", "none")
            }))
    },
    equalizer: function() {
        equalizerStart = setInterval(function() {
            miniAudioPlayerAni.miniPlayer.hasClass("playing") ? $(".equalizer span").each(function() {
                var a = parseInt(20 * Math.random())
                    , b = parseInt(400 * Math.random());
                $(this).animate({
                    height: a + "px"
                }, b, "swing")
            }) : (clearInterval(equalizerStart),
                $(".equalizer span").each(function() {
                    $(this).clearQueue(),
                        $(this).stop().animate({
                            height: "8px"
                        }, 200)
                }))
        })
    },
    equalizerClear: function() {
        this.miniPlayer.removeClass("playing")
    },
    equalizerStart: function() {
        this.equalizer(),
            this.miniPlayer.addClass("playing")
    },
    controlPannel: function() {
        var a = parseInt(this.contorlBox.width());
        this.playerBody.find(".btn_show").hide(),
            10 > a ? (this.playerBody.addClass("open"),
                this.contorlBox.animate({
                }, 400, "easeOutCirc", function() {
                    miniAudioPlayerAni.playerBody.find(".btn_show").show()
                })) : (this.playerBody.removeClass("open"),
                0 < parseInt(this.audioPlayList.css("top")) ? this.audioPlayList.animate({
                    top: "0"
                }, 200, function() {
                    miniAudioPlayerAni.audioPlayList.css({
                        display: "none"
                    }),
                        miniAudioPlayerAni.contorlBox.animate({
                            height: "50px"
                        }, 100, function() {
                            miniAudioPlayerAni.contorlBox.animate({
                                // width: "0"
                            }, 100),
                                miniAudioPlayerAni.playerBody.find(".btn_show").show(),
                                miniAudioPlayerAni.playerBody.removeClass("open")
                        })
                }) : this.contorlBox.animate({
                    // width: "0"
                }, 100, function() {
                    miniAudioPlayerAni.playerBody.find(".btn_show").show(),
                        miniAudioPlayerAni.playerBody.removeClass("open")
                }))
    },
    controlPannelClose: function() {
        var a = parseInt(this.contorlBox.width());
        return this.playerBody.find(".btn_show").hide(),
        !(10 > a) && void (this.playerBody.removeClass("open"),
            0 < parseInt(this.audioPlayList.css("top")) ? this.audioPlayList.animate({
                top: "0"
            }, 200, function() {
                miniAudioPlayerAni.audioPlayList.css({
                    display: "none"
                }),
                    miniAudioPlayerAni.contorlBox.animate({
                        height: "88px"
                    }, 100, function() {
                        miniAudioPlayerAni.contorlBox.animate({
                            // width: "0"
                        }, 100),
                            miniAudioPlayerAni.playerBody.find(".btn_show").show(),
                            miniAudioPlayerAni.playerBody.removeClass("open")
                    })
            }) : this.contorlBox.animate({
                // width: "0"
            }, 100, function() {
                miniAudioPlayerAni.playerBody.find(".btn_show").show(),
                    miniAudioPlayerAni.playerBody.removeClass("open")
            }))
    },
    audioStop: function() {
        this.equalizerClear(),
            $(".audioPlayer .pannel .btn_play button").parent().removeClass("stop"),
            $(".btn_inPlay").removeClass("stop").find("div").hide(),
            this.audioPlayTimeUpdate()
    },
    audioPlay: function() {
        this.audioStart(),
            this.equalizerStart(),
            $(".audioPlayer .pannel .btn_play button").parent().addClass("stop"),
            this.audioPlayTimeUpdate()
    },
    audioRePlay: function() {
        this.audioStart(),
            this.equalizerClear(),
            this.equalizerStart(),
            this.btnAudioPlay.parent().addClass("stop"),
            this.audioPlayTimeUpdate()
    },
    audioPlayTimeUpdate: function() {},
    audioShow: function() {
        this.playerBody.show(),
            this.btnAudioListPlay.eq(0).addClass("last")
    },
    audioStart: function() {
        this.playOpenState || (this.playerBody.addClass("open"),
            this.contorlBox.animate({
                width: "calc(100% - 50px)"
            }, 400, "easeOutCirc", function() {
                miniAudioPlayerAni.playerBody.find(".btn_show").show(),
                    setTimeout(function(){
                        miniAudioPlayerAni.playerBody.find(".btn_show").hide(),
                            miniAudioPlayerAni.playerBody.removeClass("open")
                    },1000);
            }),
            this.playOpenState = !0)
    }
}
    , console = window.console || {
    log: function() {}
}
    , _EKYOBO = function() {
    var a, b, c, d, f, g = {
        userAgent: "M",
        audioDiv: "#K_AUDIO_PLAYER_DIV",
        id: "#K_AUDIO_PLAYER",
        player: null,
        isPlaying: !1,
        playPause: ".audioPlayer .pannel .btn_play button",
        playClose: ".audioPlayer .btn_close",
        progressbar: "K_AUDIO_PROGRESS",
        progressdot: "K_AUDIO_PROGRESS_DOT",
        timeline: "K_AUDIO_TIMELINE",
        timerUp: !1,
        timerLength: 0,
        previewCount: 0,
        previewMobileCount: 5,
        previewPcCount: 5,
        volume: .4,
        delayId: 0,
        audioPalyerList: "#K_AUDIO_PALYER_LIST",
        audioPalyerListFormat: "#K_AUDIO_PALYER_LIST_FORMAT",
        audioTime: "#K_AUDIO_TIME",
        audioTitle: "#K_AUDIO_TITLE",
        audioReading: "#K_AUDIO_READING",
        audioMianImage: "#K_AUDIO_MAIN_IMG",
        test: 0
    }, h = function(a) {
        $(g.audioDiv).find("audio").remove(),
            $(g.audioDiv).html("<audio id='K_AUDIO_PLAYER' preload='auto' style='display:none;'><source src='#' type='audio/mpeg'></audio>"),
            miniAudioPlayerAni.init(),
            l(a),
            _EKYOBO.getStorageList(),
            z().done(function() {
                g.player = $(g.id)[0]
            }),
            $(g.playPause).click(function() {
                z().done(function() {
                    g.player = $(g.id)[0],
                        j(!1).done(function() {
                            !1 === g.player.paused ? (g.player.pause(),
                                g.isPlaying = !1) : (g.player.play(),
                                g.isPlaying = !0)
                        })
                }).fail(function(a) {
                    alert("\uC7AC\uC0DD\uBAA9\uB85D\uC774 \uBE44\uC5B4\uC788\uC2B5\uB2C8\uB2E4.[" + a + "]")
                })
            }),
            $(g.playClose).click(function() {
                !1 === g.player.paused && (g.player.pause(),
                    g.isPlaying = !1)
            })
    }, i = function(a, b, c, d, e, f, h) {
        $(g.audioDiv).find("audio").remove(),
            $(g.audioDiv).html("<audio id='K_AUDIO_PLAYER' preload='auto' style='display:none;'><source src='#' type='audio/mpeg'></audio>"),
            $(".audioPlayer").show(),
            A(a, b, c, d, e, f, h).done(function() {
                h === void 0 && (miniAudioPlayerAni.audioRePlay(),
                    C()),
                    z().done(function() {
                        g.player = $(g.id)[0],
                            j(!0, a).done(function() {
                                g.player.load(),
                                    g.isPlaying = !0,
                                    k()
                            })
                    })
            })
    }, j = function(a, b) {
        return a && (E() && (g.timerLength = s(b)),
            n(),
            t()),
            $.Deferred().resolve().promise()
    }, k = function() {
        clearTimeout(g.delayId),
            m()
    }, l = function(a) {
        for (var b = Object.keys(a), c = 0, d = b.length; c < d; c++)
            g.hasOwnProperty(b[c]) && (g[b[c]] = a[b[c]]);
        "M" == g.userAgent ? g.previewCount = g.previewMobileCount : "P" == g.userAgent && (g.previewCount = g.previewPcCount)
    }, m = function() {
        g.delayId = setTimeout(function() {
            g.player.play(),
                g.isPlaying = !0,
                t()
        }, 300)
    }, n = function() {
        g.player.addEventListener("timeupdate", p)
    }, o = function() {
        return 0 < g.timerLength ? g.timerLength : g.player.duration
    }, p = function() {
        var a = $("#" + g.timeline).width()
            , b = o(g.timerLength)
            , c = g.player.currentTime;
        if (!isNaN(b)) {
            var d = q(b)
                , e = r(c)
                , f = document.getElementById(g.progressbar);
            g.timerUp ? ($(g.audioTime).html(e),
                c >= b ? ($("#" + g.progressbar).width("0px"),
                    g.player.pause(),
                    g.isPlaying = !1,
                    miniAudioPlayerAni.audioStop(),
                    $(g.audioTime).html("00:00")) : $("#" + g.progressbar).width(a * (g.player.currentTime / o(g.timerLength)) + "px")) : ($(g.audioTime).html(r(b - c)),
                0 < b - c ? $("#" + g.progressbar).width(a * (g.player.currentTime / o(g.timerLength)) + "px") : ($("#" + g.progressbar).width("0px"),
                    g.player.pause(),
                    g.isPlaying = !1,
                    miniAudioPlayerAni.audioStop(),
                    console.log("1111"),
                    $(g.audioTime).html("00:00"))),
                0 < b - c ? $("#" + g.progressdot).css('left',a * (g.player.currentTime / o(g.timerLength)) + "px"):$("#" + g.progressdot).css('left','0px');
        }
    }, q = function(a) {
        var b = Math.floor(a / 60)
            , c = a - 60 * b;
        10 > b && (b = "0" + b),
        10 > c && (c = "0" + c);
        var d = c.toString()
            , e = d.substr(0, 2)
            , f = b + ":" + e;
        return f
    }, r = function(a) {
        var b = parseInt(a / 3600) % 24
            , c = parseInt(a / 60) % 60
            , d = (a % 60).toFixed();
        60 <= d && (d = 59);
        var e = (10 > c ? "0" + c : c) + ":" + (10 > d ? "0" + d : d);
        return e
    }, s = function(a) {
        var b = a.replace(/:/gi, "")
            , c = parseInt(60 * b.substring(0, 2))
            , d = parseInt(b.substring(2, 4));
        return c + d
    }, t = function() {
        a = null,
            b = null,
            c = document.getElementById(g.timeline),
            d = document.getElementById(g.progressbar),
            f = $("#" + g.timeline).width(),
            c.addEventListener("click", u),
            window.addEventListener("mouseup", x)
    }, u = function(a) {
        g.player.currentTime = o(g.timerLength) * v(a, c, f)
    }, v = function(a, b, c) {
        return (event.clientX - w(b)) / c
    }, w = function(a) {
        return a.getBoundingClientRect().left
    }, x = function(d) {
        if (null != a) {
            document.getElementById(b);
            g.player.currentTime = o(g.timerLength) * v(d, c, f),
                g.player.addEventListener("timeupdate", p),
                g.player.addEventListener("timeupdate", y)
        }
        a = null
    }, y = function() {
        var a = f * (g.player.currentTime / o(g.timerLength));
        g.player.style.marginLeft = a + "px",
        g.player.currentTime == o(g.timerLength) && (g.player.pause(),
            g.isPlaying = !1)
    }, z = function() {
        var a = [];
        try {
            if (!localStorage) {
                if ("undefined" != typeof $.cookie("AUDIO-M-LIST")) {
                    var a = JSON.parse($.cookie("AUDIO-M-LIST") || {});
                    if (0 == a.length)
                        return $.Deferred().reject(1).promise()
                } else
                    return $.Deferred().reject(1).promise();
            } else if (a = JSON.parse(localStorage.getItem("AUDIO-M-LIST")),
            [] == a)
                return $.Deferred().reject(1).promise()
        } catch (a) {
            return console.log(a),
                $.Deferred().reject(2).promise()
        }
        return null == a ? $.Deferred().reject(3).promise() : ($(g.audioMianImage).attr("src", a[0].url),
            $(g.id).find("source").attr("src", a[0].src),
            null == g.player ? $(g.audioTime).text(a[0].time) : 0 == g.player.currentTime && $(g.audioTime).text(a[0].time),
            $(g.audioTitle).text(a[0].title),
            $(g.audioReading).text(a[0].reading),
            $.Deferred().resolve().promise())
    }, A = function(a, b, c, d, e, f) {
        var h = {
            key: 0,
            time: a,
            src: b,
            barcode: c,
            url: d,
            title: e,
            reading: f
        }
            , j = [];
        j.push(h);
        try {
            if (!localStorage) {
                if ("undefined" != typeof $.cookie("AUDIO-M-LIST")) {
                    var k = JSON.parse($.cookie("AUDIO-M-LIST") || {});
                    if (0 < k.length)
                        for (var l = 0; l < k.length && g.previewCount > j.length; l++)
                            c != k[l].barcode && (h = {
                                key: j.length,
                                time: k[l].time,
                                src: k[l].src,
                                barcode: k[l].barcode,
                                url: k[l].url,
                                title: k[l].title,
                                reading: k[l].reading
                            },
                                j.push(h))
                }
                $.cookie("AUDIO-M-LIST", JSON.stringify(j), {
                    expires: 365
                })
            } else {
                var k = [];
                try {
                    k = JSON.parse(localStorage.getItem("AUDIO-M-LIST"))
                } catch (a) {
                    console.log(a)
                }
                if (null != k)
                    for (var l = 0; l < k.length && g.previewCount > j.length; l++)
                        c != k[l].barcode && (h = {
                            key: j.length,
                            time: k[l].time,
                            src: k[l].src,
                            barcode: k[l].barcode,
                            url: k[l].url,
                            title: k[l].title,
                            reading: k[l].reading
                        },
                            j.push(h));
                localStorage.setItem("AUDIO-M-LIST", JSON.stringify(j))
            }
        } catch (a) {
            return console.log(a),
                $.Deferred().reject(a).promise()
        }
        return $.Deferred().resolve().promise()
    }, B = function() {
        var a = [];
        try {
            if (!localStorage) {
                if ("undefined" != typeof $.cookie("AUDIO-M-LIST")) {
                    var a = JSON.parse($.cookie("AUDIO-M-LIST") || {});
                    return !!(0 < a.length) && ($(g.id).find("source").attr("src", a[0].src),
                        $(g.audioTime).text(a[0].time),
                        a[0])
                }
                return !1
            }
            return a = JSON.parse(localStorage.getItem("AUDIO-M-LIST")),
            [] != a && ($(g.id).find("source").attr("src", a[0].src),
                $(g.audioTime).text(a[0].time),
                a[0])
        } catch (a) {
            return !1
        }
        if (null == a)
            return !1
    }, C = function() {
        var a = [];
        try {
            if (!!localStorage)
                a = JSON.parse(localStorage.getItem("AUDIO-M-LIST"));
            else if ("undefined" != typeof $.cookie("AUDIO-M-LIST"))
                var a = JSON.parse($.cookie("AUDIO-M-LIST") || {});
            else
                return !1;
            $(g.audioPalyerList).html("");
            for (var b = 0; b < a.length; b++)
                0 == b && (a[b].btnStop = "stop",
                    a[b].btnLast = "last"),
                    $(g.audioPalyerList).append(getFormatAudioObject(g.audioPalyerListFormat, a[b]))
        } catch (a) {
            return !1
        }
        if (null == a)
            return !1
    }, D = function() {
        var a = navigator.userAgent.toLowerCase();
        return !(-1 != a.indexOf("firefox")) && !("Microsoft Internet Explorer" == navigator.appName && -1 != a.indexOf("msie") && null != /MSIE ([0-9]{1,}[./0-9]{0,})/.exec(navigator.userAgent) && (version = parseInt(RegExp.$1),
        10 > version))
    }, E = function() {
        var a = navigator.userAgent.toLowerCase();
        return !(("Netscape" != navigator.appName || -1 == navigator.userAgent.search("Trident")) && -1 == a.indexOf("msie"))
    };
    return {
        Init: function(a) {
            D() && h(a)
        },
        play: function() {
            k()
        },
        getId: function() {
            return g.id
        },
        getAudioDiv: function() {
            return g.audioDiv
        },
        fileChange: function(a, b, c, d, e, f, g) {
            var h = D();
            h ? i(a, b, c, d, e, f, g) : alert("\uD574\uB2F9 \uBE0C\uB77C\uC6B0\uC800\uC5D0\uC11C\uB294 \uC624\uB514\uC624\uBBF8\uB9AC\uB4E3\uAE30\uB97C \uC9C0\uC6D0\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.")
        },
        getStorage: function() {
            return B()
        },
        getStorageList: function() {
            return C()
        },
        getTime: function() {
            _EKYOBO.navigatorAgentIE && g.player.currentTime >= o(g.timerLength) && (g.player.currentTime = 0)
        },
        navigatorAgent: function() {
            return D()
        },
        navigatorAgentIE: function() {
            return E()
        }
    }
}()
    , getFormatAudioObject = function(a, b) {
    var c = getDomPieceAudio($(a).html(), b)
        , d = $(c);
    return d[0].originalData = b,
        d
};
function getDomPieceAudio(a, b) {
    if ("" === $.trim(a))
        return a;
    var c, d = a;
    for (c in b)
        d = domPieceReplaceAllAudio(c, b[c], d);
    return d = d.split(/\[\[[_0-9a-zA-Z]+\]\]/).join(""),
        d = d.split(/\{\{[_0-9a-zA-Z]+\}\}/).join(""),
        d
}
function domPieceReplaceAllAudio(b, c, d) {
    "use strict";
    var e, f, g = [{
        pre: "[[",
        post: "]]",
        defVal: ""
    }, {
        pre: "{{",
        post: "}}",
        defVal: 0
    }], h = ["string", "number"], i = d;
    try {
        if ("undefined" != c && null != c) {
            if ("" === (b || ""))
                throw new Error("\uBD88\uAC00\uB2A5\uD55C \uBCC0\uD658 \uD0C0\uC785\uC785\uB2C8\uB2E4.");
            if (null == c || null == c)
                throw new Error("\uBD88\uAC00\uB2A5\uD55C \uBCC0\uD658 \uD0C0\uC785\uC785\uB2C8\uB2E4.");
            for (var j = 0; j < h.length; j++)
                if (h[j] === typeof c) {
                    e = j;
                    break
                }
            f = c,
                i = i.split(g[e].pre + b + g[e].post).join(f)
        } else {
            f = "";
            for (var j = 0; j < h.length; j++)
                i = i.split(g[j].pre + b + g[j].post).join(f)
        }
        return i
    } catch (a) {
        return d
    }
}
